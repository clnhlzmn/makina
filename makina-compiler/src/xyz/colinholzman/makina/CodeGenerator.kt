package xyz.colinholzman.makina

import java.io.PrintWriter

class CodeGenerator {
    companion object {
        fun generateHeader(machine: Machine, output: PrintWriter) {
            output.println("/*This file was generated by Makina. Do not modify.*/")
            output.println("#ifndef ${machine.id.toUpperCase()}_H")
            output.println("#define ${machine.id.toUpperCase()}_H")
            output.println()
            val machineStructName = "struct ${machine.id}"
            val machineEventName = "struct ${machine.id}_event"
            val machineEventIdName = "enum ${machine.id}_event_id"
            output.println("$machineStructName;")
            output.println("$machineEventName;")
            output.println()
            machine.getAllActionAndGuardNames().forEach {
                output.println("int $it($machineStructName *, $machineEventName *);")
            }
            output.println()
            output.println("$machineEventIdName {")
            machine.getAllEventNames().forEach {
                output.println("\t${machine.id}_event_$it,")
            }
            output.println("};")
            output.println()
            output.println("$machineEventName {")
            output.println("\t$machineEventIdName id;")
            output.println("\tvoid *ctx;")
            output.println("};")
            output.println()
            output.println("$machineStructName {")
            output.println("\tint (*state)($machineStructName *, $machineEventName *);")
            output.println("\tvoid *ctx;")
            output.println("};")
            output.println()
            output.println("int ${machine.id}_init($machineStructName *);")
            output.println()
            output.println("int ${machine.id}_process_event($machineStructName *, $machineEventName *);")
            output.println()
            output.println("#endif /*${machine.id.toUpperCase()}_H*/")
            output.println()
        }
        fun generateSource(output: PrintWriter) {

        }
    }
}