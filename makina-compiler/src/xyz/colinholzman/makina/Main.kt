package xyz.colinholzman.makina

fun main(args: Array<String>) {
    for (arg in args) {
        println(arg)
        val machine = Parse.file(arg)
        if (machine.hasDuplicateStates() || machine.states.any { it.hasDuplicateHandlers() })
            throw RuntimeException("duplicate state or handler")
        machine.states.forEach { it.assignSubStates(machine); it.assignParent(machine) }
        println("/*This file was generated by Makina. Do not modify.*/")
        println("#ifndef ${machine.id.toUpperCase()}_H")
        println("#define ${machine.id.toUpperCase()}_H")
        println()
        val machineStructName = "struct ${machine.id}"
        val machineEventName = "struct ${machine.id}_event"
        val machineEventIdName = "enum ${machine.id}_event_id"
        println("$machineStructName;")
        println("$machineEventName;")
        println()
        machine.getAllActionAndGuardNames().forEach {
            println("int $it($machineStructName *, $machineEventName *);")
        }
        println()
        println("$machineEventIdName {")
        machine.getAllEventNames().forEach {
            println("\t${machine.id}_$it,")
        }
        println("};")
        println()
        println("$machineEventName {")
        println("\t$machineEventIdName id;")
        println("\tvoid *ctx;")
        println("};")
        println()
        println("$machineStructName {")
        println("\tint (*state)($machineStructName *, $machineEventName *);")
        println("\tvoid *ctx;")
        println("};")
        println()
        println("int ${machine.id}_init($machineStructName *);")
        println()
        println("int ${machine.id}_process_event($machineStructName *, $machineEventName *);")
        println()
        println("#endif /*${machine.id.toUpperCase()}_H*/")
        println()
    }
}
